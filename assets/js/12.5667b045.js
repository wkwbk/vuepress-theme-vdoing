(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{428:function(t,a,s){"use strict";s.r(a);var v=s(7),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"如何选择开源许可证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何选择开源许可证"}},[t._v("#")]),t._v(" 如何选择开源许可证？")]),t._v(" "),a("p",[t._v("世界上的开源许可证，大概有上百种。")]),t._v(" "),a("p",[t._v("很少有人搞得清楚它们的区别。")]),t._v(" "),a("p",[t._v("即使在最流行的六种协议 (GPL、BSD、MIT、Mozilla、Apache 和 LGPL) 之中做选择，也很复杂。")]),t._v(" "),a("h3",{attrs:{id:"图解分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图解分析"}},[t._v("#")]),t._v(" 图解分析")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.lisir.me/image/pages/2bcb97/20241013120910.png",alt:"20241013120910"}})]),t._v(" "),a("blockquote",[a("p",[t._v("左侧是 GPL 系，特点是其他人修改完源码后，也必须保持开源（衍生作品必须开源）。"),a("br"),t._v("\n右侧则是比较宽松的开源协议，修改后的代码可以选择闭源，Apache 协议需要为每个修改后的文件都放置版权说明，MIT 与 BSD 协议则是最宽松的协议，只需要在项目中保留一份协议的副本，就可以几乎随意使用开源代码。"),a("br"),t._v("\nBSD 有个额外的限制，是不可以使用原作者的名字对项目进行促销推广。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.lisir.me/image/pages/2bcb97/20241013120646.png",alt:"20241013120646"}})]),t._v(" "),a("h2",{attrs:{id:"git-分区概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-分区概念"}},[t._v("#")]),t._v(" Git 分区概念")]),t._v(" "),a("p",[t._v("TODO")]),t._v(" "),a("h2",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("h2",{attrs:{id:"commit-提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-提交"}},[t._v("#")]),t._v(" Commit 提交")]),t._v(" "),a("ul",[a("li",[t._v("Commit：提交（每完成一次 Commit，Git 都保存一份仓库此时的状态的快照，所有文件的状态都被记录了下来，这样整个仓库都是可回溯的）")]),t._v(" "),a("li",[t._v("Commit ID：提交 ID（就是提交的 SHA 值，使用哈希算法生成的一个独一无二的 ID）")]),t._v(" "),a("li",[t._v("Commit Message：提交信息")])]),t._v(" "),a("h3",{attrs:{id:"branch-分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branch-分支"}},[t._v("#")]),t._v(" Branch 分支")]),t._v(" "),a("ul",[a("li",[t._v("Branch：分支（存储库的不同版本）")]),t._v(" "),a("li",[t._v("每个仓库都有一个 main 分支或者 master 分支，也就是主干分支")]),t._v(" "),a("li",[t._v("创建分支也就是创建一个副本，是主干分支当时的状态快照")]),t._v(" "),a("li",[t._v("除了基于主干分支创建分支以外，还可以基于任意一个分支创建分支")]),t._v(" "),a("li",[t._v("在各自分支上的代码修改不会相互影响")])]),t._v(" "),a("h3",{attrs:{id:"merge-合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-合并"}},[t._v("#")]),t._v(" Merge 合并")]),t._v(" "),a("ul",[a("li",[t._v("Merge：合并（把分支合并回主干分支）")])]),t._v(" "),a("h3",{attrs:{id:"pull-requet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull-requet"}},[t._v("#")]),t._v(" Pull Requet")]),t._v(" "),a("ul",[a("li",[t._v("简称 PR，意思是拉取请求、合并请求（将更改从一个分支合并到另外一个分支的提案）")]),t._v(" "),a("li",[t._v("PR 会比较两个分支之间的代码差异，仓库的管理会来审核这个代码的改动，这个过程叫做 code review 也就是代码审计")])]),t._v(" "),a("h3",{attrs:{id:"git-文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-文件夹"}},[t._v("#")]),t._v(" .git 文件夹")]),t._v(" "),a("ul",[a("li",[t._v(".git 文件夹是 git 版本控制系统用来管理和存储项目历史的核心目录")]),t._v(" "),a("li",[t._v("object 文件夹存储了所有的数据对象（文件、目录、commit）")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("对象名称")]),t._v(" "),a("th",[t._v("存储内容")]),t._v(" "),a("th",[t._v("对象特点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("blob")]),t._v(" "),a("td",[t._v("文件")]),t._v(" "),a("td",[t._v("存储文件内容，每个文件以及文件历史版本都会存储并且压缩为一个 blob 对象，如果历史版本的内容相同则共用同一个 blob")])]),t._v(" "),a("tr",[a("td",[t._v("tree")]),t._v(" "),a("td",[t._v("目录")]),t._v(" "),a("td",[t._v("存储了仓库的目录结构信息")])]),t._v(" "),a("tr",[a("td",[t._v("commit")]),t._v(" "),a("td",[t._v("提交")]),t._v(" "),a("td",[t._v("一个 commit 对象包含了该提交的作者、提交时间、提交信息、还有对 tree 对象的引用")])])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("refs 文件夹")]),t._v(" "),a("ul",[a("li",[t._v("heads 包含所有的本地分支，记录了每个分支最新一次 commit 的 ID")]),t._v(" "),a("li",[t._v("remote 包含有所有的远程分支")]),t._v(" "),a("li",[t._v("tags 包含所有的标签")])])]),t._v(" "),a("li",[a("p",[t._v("HEAD 文件记录了本地当前是哪个分支")])])]),t._v(" "),a("h2",{attrs:{id:"github-基础操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#github-基础操作"}},[t._v("#")]),t._v(" GitHub 基础操作")]),t._v(" "),a("h3",{attrs:{id:"issues"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#issues"}},[t._v("#")]),t._v(" Issues")]),t._v(" "),a("p",[t._v("TODO")]),t._v(" "),a("h3",{attrs:{id:"repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[t._v("#")]),t._v(" Repository")]),t._v(" "),a("ul",[a("li",[t._v("Wiki")]),t._v(" "),a("li",[t._v("Insights")]),t._v(" "),a("li",[t._v("Project")]),t._v(" "),a("li",[t._v("Discussion")])]),t._v(" "),a("h3",{attrs:{id:"todo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#todo"}},[t._v("#")]),t._v(" TODO")]),t._v(" "),a("ul",[a("li",[t._v("[ ] repository")]),t._v(" "),a("li",[t._v("[ ] README")]),t._v(" "),a("li",[t._v("[ ] license")]),t._v(" "),a("li",[t._v("[ ] .gitignore")]),t._v(" "),a("li",[t._v("[ ] Issues")])]),t._v(" "),a("h2",{attrs:{id:"命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[t._v("#")]),t._v(" 命令")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("BranchName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])])}),[],!1,null,null,null);a.default=_.exports}}]);